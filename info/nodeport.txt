0. vim namespace.yml
	
kind: Namespace
apiVersion: v1
metadata: 
  name: nginx


1. vim deployment.yml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  namespace: nginx
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      name: nginx-dep-pod
      labels:
        app: nginx	
    spec:
      containers:
        - name: testing-dj
          image: dinesh11013/testing-demo:latest
          ports:
            - containerPort: 8000
          command: ["python", "manage.py", "runserver", "0.0.0.0:8000"]   # use this, as we are running on port 8000 in docker-compose

2. vim service.yml

apiVersion: v1
kind: Service
metadata:
  name: my-service
  namespace: nginx
spec:
  type: NodePort
  selector:
    app: nginx
  ports:
    - port: 8000
      targetPort: 8000
      nodePort: 30007

-------- with nodePort

--> kubectl get pods -n nginx -o wide
--> kubectl get svc -n nginx
Option 1 — Port Forwarding (quick & temporary)
--> sudo -E kubectl port-forward service/my-service -n nginx 8000:8000 --address=0.0.0.0  
Option 2 — Kind extraPortMappings (permanent)
- with default config.yml will not work, which is defined in the kind_cluster_installation.txt
- Edit your config.yml and add:

kind: Cluster
apiVersion: kind.x-k8s.io/v1alpha4
nodes:
- role: control-plane
- role: worker
- role: worker
  extraPortMappings:
  - containerPort: 30007
    hostPort: 30007
    protocol: TCP

run -- EC2_PUBLIC_IP:30007

kind delete cluster --name tws-cluster
kind create cluster --name tws-cluster --config=config.yml
kind get clusters    ---------- This will list all clusters created with Kind,
kubectl config current-context -------- You can also verify which cluster kubectl is currently pointing to

note: when we delete cluster then its related services like namespace, deployment etc will be removed, then recreate them 
